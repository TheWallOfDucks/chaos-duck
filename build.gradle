def aws_env = System.getProperty("aws_env")
def aws_account = System.getProperty("aws_account")
def aws_role = System.getProperty("aws_role")
def aws_profile = System.getProperty("aws_profile")
def aws_stage = System.getProperty("aws_stage")
def aws_region = System.getProperty("aws_region") ?: 'us-east-1'

ext.envVars = [:]

/**
* @description Undeploys a serverless application
*/
task undeploy (dependsOn:[ 'generateAWSCredentials' ]) {
    doLast {task -> 
        exec {
            environment << rootProject.envVars
            workingDir(".")
            executable("node_modules/.bin/serverless")
            args("remove")
            args("--environment", "${aws_env}")
            args("--stage", "${aws_stage}")
        }
    }
}

/**
* @description Completes deployment of a serverless application
*/
task deploy (dependsOn:[ 'serverlessDeploy' ]) {
    doLast { task ->
        println "Service deployment complete"
    }
}

/**
* @description Assumes a role in a given AWS environment
*/
task generateAWSCredentials {
    def temporaryCredentialsStdOut = new ByteArrayOutputStream()

    exec {
        workingDir(".")
        executable("aws")
        args("sts", "assume-role")
        args("--profile", "${aws_profile}")
        args("--role-arn", "arn:aws:iam::${aws_account}:role/${aws_role}")
        args("--role-session-name", "admin")

        standardOutput = temporaryCredentialsStdOut
    }

    println 'Temporary Credentials granted.'; 

    def slurper = new groovy.json.JsonSlurper()
    def result = slurper.parseText(temporaryCredentialsStdOut.toString())
    
    envVars["AWS_ACCESS_KEY_ID"] = "${result.Credentials.AccessKeyId}"
    envVars["AWS_SECRET_ACCESS_KEY"] = "${result.Credentials.SecretAccessKey}"
    envVars["AWS_SESSION_TOKEN"] = "${result.Credentials.SessionToken}"
    envVars["AWS_ENV"] = aws_env
    envVars["AWS_STAGE"] = aws_stage
}

/**
* @description Deploys a serverless application
*/
task serverlessDeploy (dependsOn:[ 'generateAWSCredentials' ]) {
	doLast {task -> 
		exec {
			environment << rootProject.envVars
			workingDir(".")
			executable("node")
			args("--max-old-space-size=10024")
			args("node_modules/.bin/serverless")
			args("deploy")
			args("--verbose")
		}
	}
}